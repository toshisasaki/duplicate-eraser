use std::fs;
use std::fs::File;
use std::io::{self, BufReader};
use std::path::Path;
use clap::{Arg, Command, ArgAction};
use serde::{Deserialize, Serialize};
use serde_json::from_reader;

#[derive(Serialize, Deserialize, Debug)]
struct DuplicateFiles {
    hash: String,
    paths: Vec<String>,
}

/// Delete duplicate files, keeping only one
fn delete_duplicates(duplicates: &[DuplicateFiles]) -> io::Result<()> {
    for duplicate in duplicates {
        for path in &duplicate.paths[1..] {
            fs::remove_file(path)?;
            println!("Deleted: {}", path);
        }
    }
    Ok(())
}

/// Move duplicate files to a specified directory, keeping only one
fn move_duplicates(duplicates: &[DuplicateFiles], move_dir: &str) -> io::Result<()> {
    for duplicate in duplicates {
        fs::create_dir_all(move_dir)?;

        for path in &duplicate.paths[1..] {
            let file_name = Path::new(path).file_name().unwrap();
            let target_path = Path::new(move_dir).join(file_name);

            fs::rename(path, &target_path)?;
            println!("Moved: {} -> {}", path, target_path.display());
        }
    }
    Ok(())
}

fn main() -> io::Result<()> {
    let matches = Command::new("Duplicate Files Action")
        .version("1.0")
        .author("Your Name <youremail@example.com>")
        .about("Performs actions (delete or move) on duplicate files based on a JSON input")
        .arg(Arg::new("json_file")
            .short('j')
            .long("json")
            .value_name("JSON_FILE")
            .help("The path to the JSON file generated by the duplicates finder")
            .required(true)
            .action(ArgAction::Set))
        .arg(Arg::new("action")
            .short('a')
            .long("action")
            .value_name("ACTION")
            .help("The action to perform: 'delete' or 'move'")
            .required(true)
            .action(ArgAction::Set))
        .arg(Arg::new("move_dir")
            .short('m')
            .long("move-dir")
            .value_name("MOVE_DIR")
            .help("The directory where duplicates should be moved (required for 'move' action)")
            .action(ArgAction::Set))
        .get_matches();

    let json_file = matches.get_one::<String>("json_file").unwrap();
    let action = matches.get_one::<String>("action").unwrap();
    let move_dir = matches.get_one::<String>("move_dir");

    let file = File::open(json_file)?;
    let reader = BufReader::new(file);
    let duplicates: Vec<DuplicateFiles> = from_reader(reader)?;

    match action.as_str() {
        "delete" => {
            delete_duplicates(&duplicates)?;
        }
        "move" => {
            if let Some(dir) = move_dir {
                move_duplicates(&duplicates, dir)?;
            } else {
                eprintln!("Error: --move-dir must be specified for 'move' action");
                std::process::exit(1);
            }
        }
        _ => {
            eprintln!("Unsupported action: {}", action);
            std::process::exit(1);
        }
    }

    Ok(())
}
